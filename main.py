import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ—Ä—É—Ç—Å—è –∏–∑ Render)
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Supabase –∫–ª–∏–µ–Ω—Ç
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ë–æ—Ç
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    logger.info("üîç SUPABASE_URL: %s", SUPABASE_URL)
    logger.info("üîç Trying to query Supabase for user %s...", user_id)

    try:
        result = supabase.from_("users").select("telegram_id").eq("telegram_id", user_id).execute()

        if not result.data:
            insert_data = {
                "telegram_id": user_id,
                "first_name": first_name,
                "username": username
            }
            supabase.from_("users").insert(insert_data).execute()
            logger.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", user_id)
        else:
            logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å: %s", user_id)

        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–∏–≤–µ—Ç üôÇ")

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Supabase:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
async def on_shutdown(dispatcher):
    await bot.delete_webhook()
    logger.info("üõë Webhook —É–¥–∞–ª—ë–Ω")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True
    )
