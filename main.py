import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∏ –±–æ—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    logger.info(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç {message.from_user.id}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ üõí\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/add [—Ç–æ–≤–∞—Ä] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
                         "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\n"
                         "/delete [–Ω–æ–º–µ—Ä] ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")


@dp.message_handler(commands=["add"])
async def cmd_add(message: types.Message):
    logger.info(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add –æ—Ç {message.from_user.id}")
    item = message.get_args()
    if not item:
        await message.reply("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return
    try:
        supabase.table("shopping_list").insert({
            "telegram_id": message.from_user.id,
            "item": item,
        }).execute()
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{item}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", exc_info=e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")


@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    logger.info(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list –æ—Ç {message.from_user.id}")
    try:
        response = supabase.table("shopping_list").select("id, item") \
            .eq("telegram_id", message.from_user.id).execute()
        items = response.data
        if not items:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        else:
            text = "üìù –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n\n"
            for i, entry in enumerate(items, start=1):
                text += f"{i}. {entry['item']}\n"
            await message.answer(text)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:", exc_info=e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")


@dp.message_handler(commands=["delete"])
async def cmd_delete(message: types.Message):
    logger.info(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete –æ—Ç {message.from_user.id}")
    arg = message.get_args()
    if not arg or not arg.isdigit():
        await message.reply("‚ùóÔ∏è–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /delete 2")
        return

    index = int(arg) - 1
    try:
        response = supabase.table("shopping_list").select("id, item") \
            .eq("telegram_id", message.from_user.id).execute()
        items = response.data
        if index < 0 or index >= len(items):
            await message.reply("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞")
            return

        item_id = items[index]['id']
        supabase.table("shopping_list").delete().eq("id", item_id).execute()
        await message.answer(f"üóëÔ∏è –¢–æ–≤–∞—Ä ¬´{items[index]['item']}¬ª —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", exc_info=e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø—Ç–∞–π–º–∞
from aiohttp import web


async def handle_uptime(request):
    return web.Response(text="‚úÖ Uptime OK")


async def on_startup(dp):
    if not WEBHOOK_URL:
        logger.warning("‚ùóÔ∏èWEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    else:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(dp):
    logger.info("üõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
    await bot.delete_webhook()


if __name__ == "__main__":
    if not BOT_TOKEN:
        logger.critical("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)

    app = web.Application()
    app.router.add_get("/", handle_uptime)
    app.router.add_get("/uptime", handle_uptime)
    app.router.add_post(WEBHOOK_PATH, dp.router)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
        web_app=app,
    )
