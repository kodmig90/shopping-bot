import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from supabase import create_client, Client
from dotenv import load_dotenv
from aiohttp import web

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∞–ø—Ç–∞–π–º-—á–µ–∫–æ–≤
async def handle_uptime(request):
    return web.Response(text="Bot is alive!")

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    response = supabase.table("users").select("telegram_id").eq("telegram_id", user_id).execute()
    if not response.data:
        supabase.table("users").insert({"telegram_id": user_id}).execute()

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
    )
    await message.answer(text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(commands=["add"])
async def cmd_add(message: types.Message):
    try:
        args = message.get_args()
        if not args:
            await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")
            return

        user_id = message.from_user.id
        supabase.table("shopping_list").insert({
            "telegram_id": user_id,
            "item": args,
        }).execute()

        await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {args}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")

# –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞
@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    try:
        user_id = message.from_user.id
        response = supabase.table("shopping_list").select("id", "item").eq("telegram_id", user_id).execute()
        items = response.data

        if not items:
            await message.reply("üõí –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return

        text = "üìù –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n" + "\n".join(
            [f"{item['id']}. {item['item']}" for item in items]
        )
        await message.reply(text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫.")

# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(commands=["delete"])
async def cmd_delete(message: types.Message):
    try:
        args = message.get_args()
        if not args or not args.isdigit():
            await message.reply("‚ùó –£–∫–∞–∂–∏ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 3")
            return

        item_id = int(args)
        user_id = message.from_user.id

        response = supabase.table("shopping_list").delete().eq("id", item_id).eq("telegram_id", user_id).execute()

        if response.count == 0:
            await message.reply("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ.")
        else:
            await message.reply("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
async def on_startup(dp: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp: Dispatcher):
    logger.info("‚õî –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
    await bot.delete_webhook()

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
app = web.Application()
app.router.add_get("/", handle_uptime)  # –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–ø—Ç–∞–π–º–∞
app.router.add_post(WEBHOOK_PATH, lambda request: dp.start_polling())  # –í–µ–±—Ö—É–∫ Telegram

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
