import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from supabase import create_client
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ üõí\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"
    )

@dp.message_handler(commands=["ping"])
async def cmd_ping(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

@dp.message_handler(commands=["add"])
async def cmd_add(message: types.Message):
    telegram_id = message.from_user.id
    args = message.get_args()
    logging.info(f"/add –æ—Ç {telegram_id}: {args}")
    if not args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä. –ü—Ä–∏–º–µ—Ä:\n<code>/add –•–ª–µ–±</code>")
        return

    # –ú–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ —Ç–æ–≤–∞—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ø–±–ª–æ–∫–∏ 2—à—Ç"
    supabase.table("shopping_list").insert({
        "telegram_id": telegram_id,
        "item": args,
        "quantity": 1
    }).execute()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {args}")

@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    telegram_id = message.from_user.id
    logging.info(f"/list –¥–ª—è {telegram_id}")
    response = supabase.table("shopping_list").select("*").eq("telegram_id", telegram_id).execute()
    items = response.data

    if not items:
        await message.answer("üõí –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return

    text = "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n"
    for item in items:
        text += f"‚Ä¢ {item['item']} (x{item.get('quantity', 1)})\n"
    await message.answer(text)

@dp.message_handler(commands=["delete"])
async def cmd_delete(message: types.Message):
    telegram_id = message.from_user.id
    args = message.get_args()
    if not args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä:\n<code>/delete –•–ª–µ–±</code>")
        return

    supabase.table("shopping_list").delete().eq("telegram_id", telegram_id).eq("item", args).execute()
    await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {args}")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ ‚Äî –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–µ–±—Ö—É–∫
# if __name__ == "__main__":
#     executor.start_polling(dp, skip_updates=True)
