import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Supabase –∫–ª–∏–µ–Ω—Ç
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ë–æ—Ç
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    logging.info(f"üîç SUPABASE_URL: {SUPABASE_URL}")
    logging.info("üîç Trying to query Supabase...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = supabase.from_("users").select("telegram_id").eq("telegram_id", user_id).execute()

    if not result.data:
        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        insert_data = {
            "telegram_id": user_id,
            "first_name": first_name,
            "username": username
        }
        supabase.from_("users").insert(insert_data).execute()
        logging.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_id}")

    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–∏–≤–µ—Ç üôÇ")

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
async def on_shutdown(dispatcher):
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True
    )
