import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv
from supabase import create_client, Client
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    try:
        result = supabase.from_("users").select("telegram_id").eq("telegram_id", user_id).execute()

        if not result.data:
            supabase.from_("users").insert({
                "telegram_id": user_id,
                "first_name": first_name,
                "username": username
            }).execute()
            logging.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_id}")

        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–∏–≤–µ—Ç üôÇ\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add 2 –ú–æ–ª–æ–∫–æ\n/list\n/delete –ú–æ–ª–æ–∫–æ")
    except Exception:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Supabase:", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# /add ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(commands=["add"])
async def cmd_add(message: types.Message):
    user_id = message.from_user.id
    try:
        raw_args = message.get_args().strip()
        if not raw_args:
            await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä: /add 2 –ú–æ–ª–æ–∫–æ")
            return

        parts = raw_args.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùó –£–∫–∞–∂–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /add 2 –ú–æ–ª–æ–∫–æ")
            return

        quantity = int(parts[0])
        item = parts[1].strip()

        supabase.from_("shopping_list").insert({
            "telegram_id": user_id,
            "item": item,
            "quantity": quantity,
            "added_at": datetime.utcnow().isoformat()
        }).execute()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {quantity} √ó {item}")
    except ValueError:
        await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /add 2 –ú–æ–ª–æ–∫–æ")
    except Exception:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

# /list ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞
@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    user_id = message.from_user.id
    try:
        result = supabase.from_("shopping_list").select("*").eq("telegram_id", user_id).order("added_at", desc=False).execute()
        items = result.data

        if not items:
            await message.answer("üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
            return

        text = "üìù –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n"
        for item in items:
            text += f"{item['quantity']} √ó {item['item']}\n"

        await message.answer(text)
    except Exception:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")

# /delete ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(commands=["delete"])
async def cmd_delete(message: types.Message):
    user_id = message.from_user.id
    try:
        item = message.get_args()
        if not item:
            await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä: /delete –ú–æ–ª–æ–∫–æ")
            return

        result = supabase.from_("shopping_list").delete().eq("telegram_id", user_id).eq("item", item.strip()).execute()
